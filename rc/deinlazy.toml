[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent>   [Space]f
"       \ :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
       \ :<C-u>Defx -split=vertical -winwidth=30 -direction=topleft<CR>
'''
hook_source = '''
autocmd MyAutoCmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('drop', 'pedit')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> \
  \ defx#do_action('cd', getcwd())
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
  \ ':<C-u>wincmd w<CR>' :
  \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
endfunction
'''

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  imap <silent><C-k>     <Plug>(neosnippet_jump_or_expand)
  smap <silent><C-k>     <Plug>(neosnippet_jump_or_expand)
  xmap <silent><C-k>     <Plug>(neosnippet_expand_target)

"  imap <expr><TAB>
"    \ pumvisible() ? "\<C-n>" :
"    \ neosnippet#expandable_or_jumpable() ?
"    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1

  " let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate/snippets/'
  let g:neosnippet#snippets_directory = '~/.vim/snippets'
  autocmd MyAutoCmd CompleteDone * call neosnippet#complete_done()
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source ~/.vim/rc/plugins/denite.rc.vim'
hook_add = '''
  nnoremap <silent> ;r
        \ :<C-u>Denite -buffer-name=register
        \ register neoyank<CR>
  xnoremap <silent> ;r
        \ :<C-u>Denite -default-action=replace -buffer-name=register
        \ register neoyank<CR>
  nnoremap <silent> [Window]<Space>
        \ :<C-u>Denite file/rec:~/.vim/rc<CR>
  nnoremap <silent> / :<C-u>Denite -buffer-name=search -auto-highlight
        \ line<CR>
  nnoremap <silent> * :<C-u>DeniteCursorWord -buffer-name=search
        \ -auto-highlight -mode=normal line<CR>
  nnoremap <silent> [Window]s :<C-u>Denite file/point file/old
        \ -sorters=sorter/rank
        \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`
        \ file file:new<CR>
  nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
        \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately
        \  tag:include\<CR>"
  nnoremap <silent><expr> tp  &filetype == 'help' ?
        \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite -mode=normal jump\<CR>"
  nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
  nnoremap <silent> ;g :<C-u>Denite -buffer-name=search
        \ -no-empty -mode=normal grep<CR>
  nnoremap <silent> n :<C-u>Denite -buffer-name=search
        \ -resume -mode=normal -refresh<CR>
  nnoremap <silent> ft :<C-u>Denite filetype<CR>
  nnoremap <silent> <C-t> :<C-u>Denite
        \ -select=`tabpagenr()-1` -mode=normal deol:zsh<CR>
  nnoremap <silent> <C-j> :<C-u>Denite -mode=normal change jump<CR>
  nnoremap <silent> ;;
        \ :<C-u>Denite command command_history<CR>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deol.nvim'
on_source = ['denite.nvim']
depends = 'denite.nvim'
hook_add = '''
  nnoremap <silent> N :<C-u>call deol#new({
    \ 'command': 'zsh', 'edit': v:true})<CR>
  nnoremap <silent> [Space]s :<C-u>Deol zsh -edit<CR>
  nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
"  let g:deol#prompt_pattern = '\w*%'
"  " Set to $PATH.
"  let s:bin = dein#get('vim-themis').rtp . '/bin'
"  function! s:split_envpath(path) abort
"    let delimiter = has('win32') ? ';' : ':'
"    if stridx(a:path, '\' . delimiter) < 0
"      return split(a:path, delimiter)
"    endif
"    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
"    return map(split,'substitute(v:val, ''\\\([\\'
"          \ . delimiter . ']\)'', "\\1", "g")')
"  endfunction
"  function! s:join_envpath(list, orig_path, add_path) abort
"    let delimiter = has('win32') ? ';' : ':'
"    return (stridx(a:orig_path, '\' . delimiter) < 0
"          \ && stridx(a:add_path, delimiter) < 0) ?
"          \   join(a:list, delimiter) :
"          \   join(map(copy(a:list),
"          \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
"          \        delimiter)
"  endfunction
"  let $PATH = s:join_envpath(
"        \ dein#util#_uniq(insert(
"        \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
"  let $THEMIS_HOME = dein#get('vim-themis').rtp
"  unlet s:bin
  autocmd FileType deol call s:on_deol()
  function! s:on_deol() abort
    setlocal nonu
    nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
    nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
  endfunction
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh', 'sh']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
source ~/.vim/rc/plugins/deoplete.rc.vim
call deoplete#enable()
'''

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = '''
let g:fruzzy#sortonempty = 0
'''
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
nnoremap <silent> mo :<C-u>PrevimOpen<CR>
'''

[[plugins]]
repo = 'kannokanno/previm'
# on_ft = ['markdown', 'rst', 'mkd']
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'
